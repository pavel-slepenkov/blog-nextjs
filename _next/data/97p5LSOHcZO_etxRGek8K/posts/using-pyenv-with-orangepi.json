{"pageProps":{"postData":{"id":"using-pyenv-with-orangepi","contentHtml":"<p><strong>Orange Pi Zero 2</strong> is a great product which I use a lot for a side projects. It's pretty cheap, has a tiny size and also easy to setup and run. Those it's good alternative to cloud environments if you need some not very beefy server to run your experiments. I'm running a few web crawlers on Orange PI and very happy with that.</p>\n<p>I use Armbian Debian as an OS for orange pi. It's pretty straightforward how to setup it:</p>\n<ul>\n<li><a href=\"https://www.armbian.com/download/\">download the image compatible with your device</a></li>\n<li><a href=\"https://www.balena.io/etcher/\">flash it to reliable microSD card with Etcher</a></li>\n<li>Insert the microSD card into the memory slot of the Orange Pi Zero, connect an Ethernet cable and plug in a micro USB cable to power the board.</li>\n<li>Find new host on your local network and connect via ssh <strong>ssh root@192.168.1.144</strong> with default password 1234</li>\n</ul>\n<p>That simple</p>\n<p>By default <strong>python 3.7.3</strong> is installed on Armbian (on 2021-12-03). But my codebase uses a different versions of python, and if I'd not to mess up all the environment at the start I need to setup some python version management which allows to switch python versions based on project's need. I preffer to use <ps1>pyenv</ps1>.</p>\n<p>It's not to hard to install it, all the needed instructions are in <a href=\"https://github.com/pyenv/pyenv\">its repo</a></p>\n<p>First you need to install build dependencies</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update<span class=\"token punctuation\">;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">make</span> build-essential libssl-dev zlib1g-dev <span class=\"token punctuation\">\\</span>\nlibbz2-dev libreadline-dev libsqlite3-dev <span class=\"token function\">wget</span> <span class=\"token function\">curl</span> llvm <span class=\"token punctuation\">\\</span>\nlibncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev\n</code></pre></div>\n<p>Then run installation via the following command, which I find very convenient (although you could clone repo and build it yourself)</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> https://pyenv.run <span class=\"token operator\">|</span> <span class=\"token function\">bash</span>\n</code></pre></div>\n<p>Then you need to run a set of commands to setup your environment variables</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-Ei</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'/^([^#]|$)/ {a \\</span>\n<span class=\"token string\">export PYENV_ROOT=\"$HOME/.pyenv\"</span>\n<span class=\"token string\">a \\</span>\n<span class=\"token string\">export PATH=\"$PYENV_ROOT/bin:$PATH\"</span>\n<span class=\"token string\">a \\</span>\n<span class=\"token string\">'</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">':a'</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'$!{n;ba};}'</span> ~/.profile\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(pyenv init --path)\"'</span> <span class=\"token operator\">>></span>~/.profile\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'eval \"$(pyenv init -)\"'</span> <span class=\"token operator\">>></span> ~/.bashrc\n</code></pre></div>\n<p>Now you have <strong>pyenv</strong> installed and ready to use.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">pyenv <span class=\"token function\">install</span> <span class=\"token number\">3.10</span>.0\n</code></pre></div>\n<p>I tried it and got the following result (<em>which you probably got too if reading it</em>)</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">pyenv <span class=\"token function\">install</span> <span class=\"token number\">3.10</span>.0\nDownloading Python-3.10.0.tar.xz<span class=\"token punctuation\">..</span>.\n-<span class=\"token operator\">></span> https://www.python.org/ftp/python/3.10.0/Python-3.10.0.tar.xz\nInstalling Python-3.10.0<span class=\"token punctuation\">..</span>.\npatching <span class=\"token function\">file</span> aclocal.m4\npatching <span class=\"token function\">file</span> configure\nHunk <span class=\"token comment\">#5 succeeded at 10537 (offset -15 lines).</span>\n\nBUILD FAILED <span class=\"token punctuation\">(</span>Debian <span class=\"token number\">10</span> using python-build <span class=\"token number\">20180424</span><span class=\"token punctuation\">)</span>\n\nInspect or clean up the working tree at /tmp/python-build.20211216110110.13432\nResults logged to /tmp/python-build.20211216110110.13432.log\n\nLast <span class=\"token number\">10</span> log lines:\n      <span class=\"token parameter variable\">-o</span> Modules/getbuildinfo.o ./Modules/getbuildinfo.c\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> libpython3.10.a\nar rcs libpython3.10.a Modules/getbuildinfo.o Parser/token.o  Parser/pegen.o Parser/parser.o Parser/string_parser.o Parser/peg_api.o Parser/myreadline.o Parser/tokenizer.o Objects/abstract.o Objects/accu.o Objects/boolobject.o Objects/bytes_methods.o Objects/bytearrayobject.o Objects/bytesobject.o Objects/call.o Objects/capsule.o Objects/cellobject.o Objects/classobject.o Objects/codeobject.o Objects/complexobject.o Objects/descrobject.o Objects/enumobject.o Objects/exceptions.o Objects/genericaliasobject.o Objects/genobject.o Objects/fileobject.o Objects/floatobject.o Objects/frameobject.o Objects/funcobject.o Objects/interpreteridobject.o Objects/iterobject.o Objects/listobject.o Objects/longobject.o Objects/dictobject.o Objects/odictobject.o Objects/memoryobject.o Objects/methodobject.o Objects/moduleobject.o Objects/namespaceobject.o Objects/object.o Objects/obmalloc.o Objects/picklebufobject.o Objects/rangeobject.o Objects/setobject.o Objects/sliceobject.o Objects/structseq.o Objects/tupleobject.o Objects/typeobject.o Objects/unicodeobject.o Objects/unicodectype.o Objects/unionobject.o Objects/weakrefobject.o Python/_warnings.o Python/Python-ast.o Python/asdl.o Python/ast.o Python/ast_opt.o Python/ast_unparse.o Python/bltinmodule.o Python/ceval.o Python/codecs.o Python/compile.o Python/context.o Python/dynamic_annotations.o Python/errors.o Python/frozenmain.o Python/future.o Python/getargs.o Python/getcompiler.o Python/getcopyright.o Python/getplatform.o Python/getversion.o Python/hamt.o Python/hashtable.o Python/import.o Python/importdl.o Python/initconfig.o Python/marshal.o Python/modsupport.o Python/mysnprintf.o Python/mystrtoul.o Python/pathconfig.o Python/preconfig.o Python/pyarena.o Python/pyctype.o Python/pyfpe.o Python/pyhash.o Python/pylifecycle.o Python/pymath.o Python/pystate.o Python/pythonrun.o Python/pytime.o Python/bootstrap_hash.o Python/structmember.o Python/symtable.o Python/sysmodule.o Python/thread.o Python/traceback.o Python/getopt.o Python/pystrcmp.o Python/pystrtod.o Python/pystrhex.o Python/dtoa.o Python/formatter_unicode.o Python/fileutils.o Python/suggestions.o Python/dynload_shlib.o    Modules/config.o Modules/getpath.o Modules/main.o Modules/gcmodule.o Modules/posixmodule.o  Modules/errnomodule.o  Modules/pwdmodule.o  Modules/_sre.o  Modules/_codecsmodule.o  Modules/_weakref.o  Modules/_functoolsmodule.o  Modules/_operator.o  Modules/_collectionsmodule.o  Modules/_abc.o  Modules/itertoolsmodule.o  Modules/atexitmodule.o  Modules/signalmodule.o  Modules/_stat.o  Modules/timemodule.o  Modules/_threadmodule.o  Modules/_localemodule.o  Modules/_iomodule.o Modules/iobase.o Modules/fileio.o Modules/bytesio.o Modules/bufferedio.o Modules/textio.o Modules/stringio.o  Modules/faulthandler.o  Modules/_tracemalloc.o  Modules/symtablemodule.o  Modules/xxsubtype.o Python/frozen.o\ngcc <span class=\"token parameter variable\">-pthread</span> -L/home/pavel/.pyenv/versions/3.10.0/lib  -L/home/pavel/.pyenv/versions/3.10.0/lib    <span class=\"token parameter variable\">-Xlinker</span> -export-dynamic <span class=\"token parameter variable\">-o</span> python Programs/python.o libpython3.10.a <span class=\"token parameter variable\">-lcrypt</span> <span class=\"token parameter variable\">-lpthread</span> <span class=\"token parameter variable\">-ldl</span>  <span class=\"token parameter variable\">-lutil</span> <span class=\"token parameter variable\">-lm</span>   <span class=\"token parameter variable\">-lm</span> \ngcc <span class=\"token parameter variable\">-pthread</span> -L/home/pavel/.pyenv/versions/3.10.0/lib  -L/home/pavel/.pyenv/versions/3.10.0/lib    <span class=\"token parameter variable\">-Xlinker</span> -export-dynamic <span class=\"token parameter variable\">-o</span> Programs/_testembed Programs/_testembed.o libpython3.10.a <span class=\"token parameter variable\">-lcrypt</span> <span class=\"token parameter variable\">-lpthread</span> <span class=\"token parameter variable\">-ldl</span>  <span class=\"token parameter variable\">-lutil</span> <span class=\"token parameter variable\">-lm</span>   <span class=\"token parameter variable\">-lm</span> \ncollect2: error: ld returned <span class=\"token number\">1</span> <span class=\"token builtin class-name\">exit</span> status\nmake: *** <span class=\"token punctuation\">[</span>Makefile:737: Programs/_testembed<span class=\"token punctuation\">]</span> Error <span class=\"token number\">1</span>\nmake: *** Waiting <span class=\"token keyword\">for</span> unfinished jobs<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\ncollect2: error: ld returned <span class=\"token number\">1</span> <span class=\"token builtin class-name\">exit</span> status\nmake: *** <span class=\"token punctuation\">[</span>Makefile:602: python<span class=\"token punctuation\">]</span> Error <span class=\"token number\">1</span>\n</code></pre></div>\n<p>You can check the logs and though the reading it you will notice something like <strong>/tmp no space left on device</strong> what's pretty weird as there's a lot of space on newly spinned server.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">pavel@orangepizero2:~$ <span class=\"token function\">df</span> <span class=\"token parameter variable\">-h</span>\n\nFilesystem      Size  Used Avail Use% Mounted on\nudev            470M     <span class=\"token number\">0</span>  470M   <span class=\"token number\">0</span>% /dev\ntmpfs            97M  <span class=\"token number\">5</span>.4M   92M   <span class=\"token number\">6</span>% /run\n/dev/mmcblk0p1   29G  <span class=\"token number\">1</span>.8G   27G   <span class=\"token number\">7</span>% /\ntmpfs           483M     <span class=\"token number\">0</span>  483M   <span class=\"token number\">0</span>% /dev/shm\ntmpfs           <span class=\"token number\">5</span>.0M  <span class=\"token number\">4</span>.0K  <span class=\"token number\">5</span>.0M   <span class=\"token number\">1</span>% /run/lock\ntmpfs           483M     <span class=\"token number\">0</span>  483M   <span class=\"token number\">0</span>% /sys/fs/cgroup\n/dev/zram1      468M  752K  433M   <span class=\"token number\">1</span>% /tmp\narmbian-ramlog   50M  <span class=\"token number\">4</span>.7M   46M  <span class=\"token number\">10</span>% /var/log\ntmpfs            97M     <span class=\"token number\">0</span>   97M   <span class=\"token number\">0</span>% /run/user/1000\n</code></pre></div>\n<p>You might notice that <strong>/tmp</strong> <code>/dev/zram1      468M  752K  433M   1% /tmp</code> isn't a big enough , but <strong>pyenv</strong> is used it to unpack and operate during installation. So you need to fix it somehow. There's a few solutions, including increasing /tmp size, but the simplest one is to add <code>TMPDIR</code> environment variable which allows <strong>pyenv</strong> to use all the disk space on device where you pointed it. Run in terminal or add it to <strong>.bashrc</strong> if you want to make it permanent (as pip will also use TMPDIR).</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TMPDDIR</span><span class=\"token operator\">=</span>/var/tmp\n</code></pre></div>\n<p>This will fix the problem and a next pyenv run will be completed succefully.</p>\n<p><strong>PS</strong> / You might get the following error</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">pyenv <span class=\"token function\">install</span> <span class=\"token parameter variable\">-v</span> <span class=\"token number\">3.10</span>.0\npython-build: <span class=\"token assign-left variable\">TMPDIR</span><span class=\"token operator\">=</span>/var/tmp is <span class=\"token builtin class-name\">set</span> to a non-accessible location\n</code></pre></div>\n<p>That's the result of running <strong>systemctl mask tmp.mount</strong> which is another option to fix /tmp space issue. To fix it you need to remount <code>sudo mount -o remount,rw /</code></p>\n","title":"Using pyenv with Orange Pi","date":"2021-12-03T21:25:00+00:00","status":"publish","permalink":"/?p=1079","author":"pavel","excerpt":"","type":"post","tag":["python","pyenv","orangepi"]}},"__N_SSG":true}