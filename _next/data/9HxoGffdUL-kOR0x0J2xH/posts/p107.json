{"pageProps":{"postData":{"id":"p107","contentHtml":"<p>Salesforce requires at least 75% test coverage for production org. But a code coverage is not straightforward and really truth metric, because you can have 100% code coverage, but you can't be sure that it really tests all needed pieces of your app. Really, I saw a codebases which had 96-97%, but it was covered with a <a href=\"http://pavelslepenkov.info/posts/p110\">hack</a> or it used <a href=\"http://martinfowler.com/bliki/AssertionFreeTesting.html\">AssertionFreeTesting</a>. The main thing that you should keep in mind is that code coverage is not about quality of you code, is about a not covered pieces of you code. And you should cover it. I have used <strong>AAA(Arrange-Act-Assert) patter</strong> for apex unit tests and it make sense for me. Let's take a look what is means this pattern.</p>\n<p>To follow this pattern you should do the following things:</p>\n<ol>\n<li><ps2><strong>Arrange</strong></ps2> all necessary preconditions and inputs.</li>\n<li><ps2><strong>Act</strong></ps2> on the object or method under test.</li>\n<li><ps2><strong>Assert</strong></ps2> that the expected results have occurred.</li>\n</ol>\n<p>Let's deep inside each point with some demo preconditions:</p>\n<p>Imagine yourself that you have such class which runs from Account trigger and made some updates on the related contacts (lookup field Executive__c).</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\">trigger <span class=\"token class-name\">Account</span> on <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">(</span>after update<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Id</span><span class=\"token punctuation\">></span></span> contactIds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Id</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token operator\">:</span> trigger<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        contactIds<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">account<span class=\"token punctuation\">.</span></span>Executive__c<span class=\"token punctuation\">.</span>Id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ReindexerConfig__c</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>executiveReindexEnabled__c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">AccountTriggerHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">reindexExecutives</span><span class=\"token punctuation\">(</span>contactIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountTriggerHandler</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reindexExecutives</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Id</span><span class=\"token punctuation\">></span></span> contactId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// do something</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><ps1>1. <strong>Arrange</strong></ps1></p>\n<p>So, we have some data which should be initialized before we might perform testing. The first thing is that we need Account and Contact with right data and the second one is that we need custom setting ReindexedConfiguration__c. We have 3 options:</p>\n<ol>\n<li>Create all needed data during test runtime</li>\n<li>Load test data with <a href=\"http://www.salesforce.com/us/developer/docs/apexcode/Content/apex_methods_system_test.htm#TestLoadDataExampleSection\">Test.loadData</a></li>\n<li>Provide access to real data with IsTest(SeeAllData=true) annotation (It's bad idea)</li>\n</ol>\n<p>For me the first option is more convenient and I'll go ahead with it. So, I create a dedicated helper class for preparation a needed test data.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@isTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestHelper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">USER_NAME</span> <span class=\"token operator\">=</span> '<span class=\"token class-name\">TestUser_</span>'<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> <span class=\"token constant\">DEFAULT_NAME_FIELD_LENGTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">generateUniqueName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> maxLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> ''<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token char\">' '</span><span class=\"token punctuation\">,</span><span class=\"token char\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token char\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span>maxLength – <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>maxLength – <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">generateUniqueName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">generateUniqueName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DEFAULT_NAME_FIELD_LENGTH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initTestEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ReindexerConfig__c</span> reindexConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReindexerConfig__c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        reindexConf<span class=\"token punctuation\">.</span>executiveReindexEnabled__c <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        insert reindexConf<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Id</span> <span class=\"token function\">getProfile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> profileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Profile</span> profile <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token constant\">SELECT</span> <span class=\"token class-name\">Id</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Name</span> <span class=\"token constant\">FROM</span> <span class=\"token class-name\">Profile</span> <span class=\"token constant\">WHERE</span> <span class=\"token class-name\">Name</span> <span class=\"token operator\">=</span><span class=\"token operator\">:</span> profileName\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\"><span class=\"token namespace\">profile<span class=\"token punctuation\">.</span></span>Id</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Id</span> <span class=\"token function\">getRoleId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> roleName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">UserRole</span><span class=\"token punctuation\">></span></span> roles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token constant\">SELECT</span> <span class=\"token class-name\">Id</span> <span class=\"token constant\">FROM</span> <span class=\"token class-name\">UserRole</span> <span class=\"token constant\">WHERE</span> <span class=\"token class-name\">Name</span> <span class=\"token operator\">=</span><span class=\"token operator\">:</span> roleName\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>roles<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> roles<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">initTestEnvironementAsUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">User</span> resultUser <span class=\"token operator\">=</span> <span class=\"token function\">createTestUser</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>params<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAs</span><span class=\"token punctuation\">(</span>resultUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">initTestEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> resultUser<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span> <span class=\"token function\">createAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Name</span> <span class=\"token operator\">=</span> '<span class=\"token class-name\">Test</span> <span class=\"token class-name\">Account</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Contact</span> <span class=\"token function\">createContact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Contact</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">FirstName</span> <span class=\"token operator\">=</span> <span class=\"token char\">'Test'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">LastName</span> <span class=\"token operator\">=</span> '<span class=\"token class-name\">Contact</span>'\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Contact</span> <span class=\"token function\">createContact</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Contact</span> result <span class=\"token operator\">=</span> <span class=\"token function\">createContact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token namespace\">result<span class=\"token punctuation\">.</span></span>Account</span> <span class=\"token operator\">=</span> account<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">User</span> <span class=\"token function\">createTestUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> profileName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> roleName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> testUserName <span class=\"token operator\">=</span> <span class=\"token function\">generateUniqueName</span><span class=\"token punctuation\">(</span><span class=\"token constant\">USER_NAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">User</span> newUser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">LastName</span> <span class=\"token operator\">=</span> testUserName<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">FirstName</span> <span class=\"token operator\">=</span> testUserName<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Alias</span> <span class=\"token operator\">=</span> testUserName<span class=\"token punctuation\">.</span><span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Email</span> <span class=\"token operator\">=</span> testUserName <span class=\"token operator\">+</span> '<span class=\"token annotation punctuation\">@mail.com</span>'<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Username</span> <span class=\"token operator\">=</span> testUserName <span class=\"token operator\">+</span> '<span class=\"token annotation punctuation\">@mail.com</span>'<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">CommunityNickname</span> <span class=\"token operator\">=</span> testUserName<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">UserRoleId</span> <span class=\"token operator\">=</span> <span class=\"token function\">getRoleId</span><span class=\"token punctuation\">(</span>roleName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">TimeZoneSidKey</span> <span class=\"token operator\">=</span> '<span class=\"token class-name\">America</span><span class=\"token operator\">/</span><span class=\"token class-name\">New_York</span>'<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">LocaleSidKey</span> <span class=\"token operator\">=</span> <span class=\"token char\">'en_US'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">EmailEncodingKey</span> <span class=\"token operator\">=</span> '<span class=\"token constant\">ISO</span><span class=\"token operator\">-</span><span class=\"token number\">8859</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>'<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">ProfileId</span> <span class=\"token operator\">=</span> <span class=\"token function\">getProfile</span><span class=\"token punctuation\">(</span>profileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">LanguageLocaleKey</span> <span class=\"token operator\">=</span> <span class=\"token char\">'en_US'</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        insert newUser<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> newUser<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Using helpers methods into test class</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@isTest</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountTriggerTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// Arrange section ———————————-</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initTestSuite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    account <span class=\"token operator\">=</span> <span class=\"token class-name\">TestHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">creteAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    contact <span class=\"token operator\">=</span> <span class=\"token class-name\">TestHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">createContact</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><ps1><strong>2. Act</strong></ps1></p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Act section ————————————–</span>\n<span class=\"token comment\">// here we performs all needed action</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testExecutiveReindex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    insert account<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token namespace\">account<span class=\"token punctuation\">.</span></span>SomeField__c</span> <span class=\"token operator\">=</span> <span class=\"token char\">'test'</span><span class=\"token punctuation\">;</span>\n    update account<span class=\"token punctuation\">;</span> <span class=\"token comment\">// run account trigger on update</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">performTest2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// test something else</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><ps1><strong>3. Assert</strong></ps1></p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Assert section ———————————–</span>\n<span class=\"token comment\">// here we perform all assertion on</span>\n<span class=\"token annotation punctuation\">@isTest</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">verifyExecutiveReindexAs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">initTestEnvironementAsUser</span><span class=\"token punctuation\">(</span><span class=\"token constant\">COMMON_BUSINES_USER_CONF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">initTestSuite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Assert</span> something on your objects as <span class=\"token constant\">COMMON_BUSINES_USER_CONF</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Assert</span> any system state'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">testExecutiveReindex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// run \"Act\"</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Assert</span> something on your objects as <span class=\"token constant\">COMMON_BUSINES_USER_CONF</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Assert</span> any system state'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><ps1>Full code of test class</ps1></p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@isTest</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountTriggerTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Contact</span> contact<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// users config for loading this configs into tests 'Profile' 'Role'</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">COMMON_BUSINES_USER_CONF</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>'<span class=\"token class-name\">Common</span> <span class=\"token class-name\">User</span><span class=\"token char\">','</span><span class=\"token class-name\">Branch</span> <span class=\"token class-name\">Store</span>'<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">CHIEF_SECURITY_OFFICER_CONF</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span><span class=\"token char\">'CSO'</span><span class=\"token punctuation\">,</span>'<span class=\"token class-name\">Top</span> <span class=\"token class-name\">Level</span>'<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">BUSINES_ADMINISTRATOR_CONF</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>'<span class=\"token class-name\">Busines</span> <span class=\"token class-name\">Admin</span><span class=\"token char\">','</span><span class=\"token class-name\">Top</span> <span class=\"token class-name\">Level</span>'<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Arrange section ———————————-</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initTestSuite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        account <span class=\"token operator\">=</span> <span class=\"token class-name\">TestHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">creteAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        contact <span class=\"token operator\">=</span> <span class=\"token class-name\">TestHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">createContact</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Act section ————————————–</span>\n    <span class=\"token comment\">// here we performs all needed action</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testExecutiveReindex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        insert account<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token namespace\">account<span class=\"token punctuation\">.</span></span>SomeField__c</span> <span class=\"token operator\">=</span> <span class=\"token char\">'test'</span><span class=\"token punctuation\">;</span>\n        update account<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">performTest2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// test something else</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Assert section ———————————–</span>\n    <span class=\"token comment\">// here we perform all assertion on</span>\n    <span class=\"token annotation punctuation\">@isTest</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">verifyExecutiveReindexAs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">initTestEnvironementAsUser</span><span class=\"token punctuation\">(</span><span class=\"token constant\">COMMON_BUSINES_USER_CONF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">initTestSuite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Assert</span> something on your objects as <span class=\"token constant\">COMMON_BUSINES_USER_CONF</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Assert</span> any system state'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">testExecutiveReindex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Assert</span> something on your objects as <span class=\"token constant\">COMMON_BUSINES_USER_CONF</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Assert</span> any system state'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@isTest</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">verifyExecutiveReindexAs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">initTestEnvironementAsUser</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CHIEF_SECURITY_OFFICER_CONF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">initTestSuite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Assert</span> something on your objects as <span class=\"token constant\">CHIEF_SECURITY_OFFICER_CONF</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Assert</span> any system state'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">testExecutiveReindex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Assert</span> something on your objects as <span class=\"token constant\">CHIEF_SECURITY_OFFICER_CONF</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Assert</span> any system state'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@isTest</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">verifyExecutiveReindexAs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">initTestEnvironementAsUser</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BUSINES_ADMINISTRATOR_CONF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">initTestSuite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Assert</span> something on your objects as <span class=\"token constant\">BUSINES_ADMINISTRATOR_CONF</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Assert</span> any system state'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">testExecutiveReindex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Assert</span> something on your objects as <span class=\"token constant\">BUSINES_ADMINISTRATOR_CONF</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>'<span class=\"token class-name\">Assert</span> any system state'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<p>This pattern fills good for testing applications with complex and ramified hierarchy of users, roles and profiles.</p>\n","title":"Using AAA pattern in salesforce unit tests","date":"2013-07-29T10:46:24+01:00","status":"publish","permalink":"/?p=107","author":"pavel","excerpt":"","type":"post","category":["force.com"],"tag":["apex","testing"],"post_format":[],"fplayout":["fullwidth"],"original_post_id":["107"],"dsq_thread_id":["5602105117"]}},"__N_SSG":true}