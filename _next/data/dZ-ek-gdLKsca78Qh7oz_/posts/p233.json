{"pageProps":{"postData":{"id":"p233","contentHtml":"<p>The one of the most significant things in testing is an ability to repeat your tests any number of times with the same state of environment. What is an environment state and how can we provide an ability to emulate the same state each time?</p>\n<p>Test environment includes the following components:</p>\n<ul>\n<li>Configuration (The state of the configuration and system parameters should be the same)</li>\n<li>Data level (it’s all data which needed for tests)</li>\n<li>Time (many operations depend on a time)</li>\n</ul>\n<p>Sure, it’s pretty simple if we’re talking about a data level as well as a configuration. In these areas we can reload a new data set each time if old data set will be broken. But what about a time? Here we have a strongly limitation but it might be avoided. So, we can implement the following solution on the top of system date/time. Such approach will be extremely useful for QA team. We’ll create a custom setting which will allow us to enable the time emulation, set a time shift and a fixed current time. So, let’s go ahead.</p>\n<p>Go to <strong>Setup → Develop → Custom Settings → Create</strong> and create a new custom setting with hierarchy type. In my example I named it <strong>Date Time Configuration</strong> (DateTimeConfiguration__c) but you can name it as you want. But be aware that you need to change the code below for using your setting name.</p>\n<p>Ok, let’s add a few fields. I created fields:</p>\n<ul>\n<li><strong>Boolean isEmulationEnabled__c,</strong></li>\n<li><strong>DateTime emulatedDT__c,</strong></li>\n<li><strong>Integer dateShift__c.</strong></li>\n</ul>\n<p>It’s enough for our purposes. So, we’ve finished with the creation of needed config and now we can implement a code.</p>\n<p><strong>EDateTime.cls</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EDateTime</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DateTimeConfiguration__c</span> dtConfig<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DateTime</span> currentDateTime <span class=\"token punctuation\">{</span>\n        get <span class=\"token punctuation\">{</span>\n            currentDateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// on Production we always use real time</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Utils</span><span class=\"token punctuation\">.</span>isProduction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Caching DateTime configuration</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dtConfig <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    dtConfig <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeConfiguration__c</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">// if configuration exists and emulation is enabled we define new date and time</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dtConfig <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&#x26;&#x26;</span> dtConfig<span class=\"token punctuation\">.</span>isEmulationEnabled__c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dtConfig<span class=\"token punctuation\">.</span>dateShift__c <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        currentDateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addDays</span><span class=\"token punctuation\">(</span>dtConfig<span class=\"token punctuation\">.</span>dateShift__c<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        currentDateTime <span class=\"token operator\">=</span> dtConfig<span class=\"token punctuation\">.</span>emulatedDT__c<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> currentDateTime<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">today</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> currentDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DateTime</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> currentDateTime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<p><strong>Utils.cls</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Boolean</span> isProduction <span class=\"token punctuation\">{</span>\n    get <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The Prod Org Id is permanent and can be hardcoded</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UserInfo</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrganizationId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ’<span class=\"token number\">00D</span>E0000000bplPMAX’ <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> set<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Now you need to replace all invocation of <code>System.now()</code> in your code by a new one method <code>EDateTime.now()</code>, as well as <code>System.today()</code> by <code>EDateTime.today()</code>. Now you can reproduce your tests with the same date and time as many times as you want. It might be extremely useful if you’re testing a time-based solutions.\nThat’s it.</p>\n","title":"Emulation of date and time on Force.com","date":"2015-10-02T00:00:01+01:00","status":"publish","permalink":"/?p=233","author":"pavel","excerpt":"","type":"post","category":["force.com"],"tag":["apex","date/time","date/time emulation","force.com","salesforce"]}},"__N_SSG":true}