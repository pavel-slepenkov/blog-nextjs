{"pageProps":{"postData":{"id":"p718","contentHtml":"<p>I found that a few times in a different projects and now I’d share this common mistake with you.</p>\n<p>[code lang=”java”]\nString someVariable = ”;\n… // 50 lines of code between declaration and first use\nfor (Account acc: accounts) {\nsomeVariable = acc.Some_Field__c;\n// rest of the loop\n}\n[/code]</p>\n<p>Actually I really hate to find something like that in my codebase. What’s wrong with this code? Just one moment – the string variable which is on scope of for loop is declared outside of the for loop. That was an optimisation for some old compilers for C/C++ a many years ago. But modern compilers can optimise your code much better that you. So, just let them do that.</p>\n<p>[code lang=”java”]\nfor (Account acc: accounts) {\nString someVariable = acc.Some_Field__c;\n// rest of the loop\n}\n[/code]</p>\n<p>This code will be much effective that the first one. I did a few tests on Apex.</p>\n<p>[code lang=”java”]\nString s1;\nDatetime start = System.now();\nfor (Integer i = 0; i > 100000; i++) {\ns1 = String.valueOf(i);\n}\nSystem.debug( System.now().getTime() – start.getTime());\n[/code]</p>\n<p>with results:</p>\n<p>USER_DEBUG [6]|DEBUG|3006\nUSER_DEBUG [6]|DEBUG|3029\nUSER_DEBUG [6]|DEBUG|3189\nUSER_DEBUG [6]|DEBUG|3256\nUSER_DEBUG [7]|DEBUG|3346</p>\n<p>and run</p>\n<p>[code lang=”java”]\nDatetime start = System.now();\nfor (Integer i = 0; i &#x26;lt; 100000; i++) {\nString s1 = String.valueOf(i);\n}\nSystem.debug( System.now().getTime() – start.getTime());</p>\n<p>[/code]</p>\n<p>with the following results:</p>\n<p>USER_DEBUG [5]|DEBUG|2954\nUSER_DEBUG [5]|DEBUG|2978\nUSER_DEBUG [5]|DEBUG|3102\nUSER_DEBUG [5]|DEBUG|3176\nUSER_DEBUG [5]|DEBUG|3205</p>\n<p>Runs through 300.000 iterations:</p>\n<p><strong>Variable declared outside the loop</strong>\nUSER_DEBUG [6]|DEBUG|8260\nUSER_DEBUG [6]|DEBUG|8415\nUSER_DEBUG [6]|DEBUG|8606\nUSER_DEBUG [6]|DEBUG|8614\nUSER_DEBUG [6]|DEBUG|8739\nUSER_DEBUG [6]|DEBUG|8852\nUSER_DEBUG [6]|DEBUG|8940\nUSER_DEBUG [6]|DEBUG|9109\nUSER_DEBUG [6]|DEBUG|9184\nUSER_DEBUG [6]|DEBUG|9267\nUSER_DEBUG [6]|DEBUG|9292\nUSER_DEBUG [6]|DEBUG|9461</p>\n<p><strong>Variable declared inside the loop</strong>\nUSER_DEBUG [5]|DEBUG|8093\nUSER_DEBUG [5]|DEBUG|8135\nUSER_DEBUG [5]|DEBUG|8448\nUSER_DEBUG [5]|DEBUG|8598\nUSER_DEBUG [5]|DEBUG|8785\nUSER_DEBUG [5]|DEBUG|8948\nUSER_DEBUG [5]|DEBUG|9032\nUSER_DEBUG [5]|DEBUG|9087\nUSER_DEBUG [5]|DEBUG|9122\nUSER_DEBUG [5]|DEBUG|9260\nUSER_DEBUG [5]|DEBUG|9330\nUSER_DEBUG [5]|DEBUG|9347</p>\n<p><em>*Results was sorted for better readability</em></p>\n<p>As you can see the code which use a declaration of variables inside the loop works faster or with the same time of execution. But such code is much more supportable and readable.</p>\n","title":"Apex variable declaration and for loop performance","date":"2016-08-27T09:15:50+01:00","status":"publish","permalink":"/?p=718","author":"pavel","excerpt":"","type":"post","category":["apex","force.com"],"tag":["apex","best practice","refactoring time","salesforce"],"post_format":[],"dsq_thread_id":["5617202917"]}},"__N_SSG":true}