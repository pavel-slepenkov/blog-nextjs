{"pageProps":{"postData":{"id":"p501","contentHtml":"<p>Pretty often You need to know how many times some Contact has been used in Log a Call functionality. Aggregation of such count in an account level might be pretty useful too. So, let’s implement this functionality. I faced with such requirement a few times with different customers, so I’d like to share my experience.</p>\n<p>As all you know, in the perfect world we should use built-in functionality and avoid a custom implementations. So, firstly I was looking for a way to build it with Salesforce native approach. First thing which was considered is a Roll-up summary field. But we can’t use Roll-up summary fields here, because these object has no master-detail relationship by default. Sure, you can create such relation, but it’s no a case for me. The result of quick investigation lets me think that trigger will be an ideal solution for such functionality.</p>\n<p>So, firstly I create 2 fields Reference_Count__c on Contact and Account. Both fields has Number type.</p>\n<p>After that I create a trigger on Task object which runs <strong>after insert, after update</strong> and <strong>after delete</strong>.</p>\n<p>There are the following cases:</p>\n<ul>\n<li>When user creates task with Type = ‘Call’ we have to <strong>increase</strong> counter on Contact which is related to this task and also we have to increate a count on Account which is related to Contact.</li>\n<li>When user changes type of task from any to ‘Call’ we have to <strong>increase</strong> counters.</li>\n<li>When user changes type of task from ‘Call’ to any other we have to <strong>decrease</strong> counter for Contact and Account related to this task.</li>\n<li>Also we have to <strong>decrease</strong> counters when user removes Task</li>\n</ul>\n<p>You can find a whole solution on <a href=\"https://github.com/pavel-slepenkov/salesforce_solutions/tree/master/reference_count\">GitHub.</a></p>\n<p>Let’s break each point to separate method:\n1) When user creates task with Type = ‘Call’ we have to increase counter on Contact which is related to this task and also we have to increate a count on Account which is related to Contact.</p>\n<p>[java]\nprivate static void increaseReferenceCountOnInsert(List&#x3C;sObject> newRecords) {\nList&#x3C;sObject> taskRelatedToContact = new List&#x3C;sObject>();\nfor (SObject obj : newRecords) {\nif (((String)obj.get(‘WhoId’)).startsWith(CONTACT_RECORDS_PREFIX) &#x26;&#x26; ((String)obj.get(‘Type’)) == LOG_A_CALL_TYPE) {\ntaskRelatedToContact.add(obj);\n}\n}\nupdateReferenceCountField(taskRelatedToContact, true);\n}\n[/java]</p>\n<p>2) When user changes type of task from any to ‘Call’ we have to increase counters.</p>\n<p>[java]\nprivate static void increaseReferenceCountOnUpdate(List&#x3C;sObject> newRecords, Map&#x3C;ID, sObject> oldRecordsMap) {\nList&#x3C;sObject> taskRelatedToContact = new List&#x3C;sObject>();\nfor (SObject obj : newRecords) {\nif (((String)obj.get(‘WhoId’)).startsWith(CONTACT_RECORDS_PREFIX)\n&#x26;&#x26; ((String)obj.get(‘Type’)) == LOG_A_CALL_TYPE\n&#x26;&#x26; ((String)(oldRecordsMap.get((Id)obj.get(‘Id’))).get(‘Type’)) != LOG_A_CALL_TYPE) {\ntaskRelatedToContact.add(obj);\n}\n}\nupdateReferenceCountField(taskRelatedToContact, true);\n}\n[/java]</p>\n<p>The next method is used for 2 cases:\n3) When user changes type of task from ‘Call’ to any other we have to decrease counter for Contact and Account related to this task.\n4) Also we have to decrease counters when user removes Task</p>\n<p>[java]\nprivate static void decreaseReferenceCountOnTaskTypeChange(List&#x3C;sObject> newRecords, Map&#x3C;ID, sObject> oldRecordsMap) {\nList&#x3C;sObject> taskToDecreaseCount = new List&#x3C;sObject>();\nfor (SObject obj : newRecords) {\nif (Trigger.isUpdate) {\nif (((String)obj.get(‘WhoId’)).startsWith(CONTACT_RECORDS_PREFIX)\n&#x26;&#x26; ((String)obj.get(‘Type’)) != LOG_A_CALL_TYPE\n&#x26;&#x26; ((String)(oldRecordsMap.get((Id)obj.get(‘Id’))).get(‘Type’)) == LOG_A_CALL_TYPE) {\ntaskToDecreaseCount.add(obj);\n}\n} else if (Trigger.isDelete &#x26;&#x26; ((String)obj.get(‘Type’)) == LOG_A_CALL_TYPE ) {\ntaskToDecreaseCount.add(obj);\n}\n}\nupdateReferenceCountField(taskToDecreaseCount, false);\n}\n[/java]</p>\n<p>You can find that all these methods invoke updateReferenceCountField method</p>\n<p>[java]\nprivate static void updateReferenceCountField(List&#x3C;sObject> tasks, Boolean isIncrement) {\nMap&#x3C;Id, List&#x3C;sObject>> tasksByContact = splitListBySpecialKey(tasks, ‘WhoId’);\nList&#x3C;Contact> relatedContactsForUpdateCountField = [SELECT Id, Reference_Count__c, AccountId\nFROM Contact\nWHERE Id IN: tasksByContact.keySet()];\nupdateAccounts(relatedContactsForUpdateCountField, tasksByContact, isIncrement);\nupdateContacts(relatedContactsForUpdateCountField, tasksByContact, isIncrement);\n}\n[/java]</p>\n<p>Which invokes 2 method which actually perform DML</p>\n<p>[java]\nprivate static void updateAccounts(List&#x3C;Contact> relatedContactsForUpdateCountField,\nMap&#x3C;Id, List&#x3C;sObject>> tasksByContact,\nBoolean isIncrement) {\n// ContactId, Account\nMap&#x3C;Id,Id> contactIdByAccountId = new Map&#x3C;Id,Id>();\nfor (Contact cont: relatedContactsForUpdateCountField) {\ncontactIdByAccountId.put(cont.AccountId, cont.Id);\n}\nList&#x3C;Account> accountsRelatedToContactsForUpdate = [SELECT Id, Reference_Count__c\nFROM Account\nWHERE Id IN: contactIdByAccountId.keySet()];</p>\n<p>for (Account acc: accountsRelatedToContactsForUpdate) {\nif (acc.Reference_Count__c != null) {\nif (isIncrement) {\nacc.Reference_Count__c += tasksByContact.get(contactIdByAccountId.get(acc.Id)).size();\n} else {\nacc.Reference_Count__c -= tasksByContact.get(contactIdByAccountId.get(acc.Id)).size();\n}\n} else {\nacc.Reference_Count__c = tasksByContact.get(contactIdByAccountId.get(acc.Id)).size();\n}\n}\nupdate accountsRelatedToContactsForUpdate;\n}</p>\n<p>private static void updateContacts(List&#x3C;Contact> relatedContactsForUpdateCountField,\nMap&#x3C;Id, List&#x3C;sObject>> tasksByContact,\nBoolean isIncrement) {\nfor (Contact cont: relatedContactsForUpdateCountField) {\nInteger amountOfNewTasks = tasksByContact.get(cont.Id).size();\nif (amountOfNewTasks > 0) {\nif (cont.Reference_Count__c != null) {\nif (isIncrement) {\ncont.Reference_Count__c += amountOfNewTasks;\n} else {\ncont.Reference_Count__c -= amountOfNewTasks;\n}\n} else {\ncont.Reference_Count__c = amountOfNewTasks;\n}\n}\n}\nupdate relatedContactsForUpdateCountField;\n}\n[/java]</p>\n<p>Also we need this utility method for transformation list into map</p>\n<p>[java]\npublic static Map&#x3C;Id, List&#x3C;sObject>> splitListBySpecialKey(List&#x3C;sObject> sourceList, String key) {\nif (sourceList == null) {\nthrow new IncorrectParameterException(‘ERROR: splitListBySpecialKey(sourceList, key) got incorrect first parameter.’);\n}\nif (String.isBlank(key)) {\nthrow new IncorrectParameterException(‘ERROR: splitListBySpecialKey(sourceList, key) got incorrect second parameter.’);\n}\nMap&#x3C;Id, List&#x3C;sObject>> result = new Map&#x3C;Id, List&#x3C;sObject>>();\nList&#x3C;sObject> tmpObjs;\nfor (sObject obj : sourceList) {\ntmpObjs = new List&#x3C;sObject>();\nif (obj.get(key) != null &#x26;&#x26; result.containsKey((Id)obj.get(key))) {\ntmpObjs = result.get((Id)obj.get(key));\ntmpObjs.add(obj);\nresult.put((Id)obj.get(key), tmpObjs);\n} else if (obj.get(key) != null) {\ntmpObjs.add(obj);\nresult.put((Id)obj.get(key), tmpObjs);\n}\n}\nreturn result;\n}\npublic class IncorrectParameterException extends System.Exception {}\n[/java]</p>\n","title":"Calculate amount of specified task records which are related to Contact and Account in Salesforce","date":"2015-07-15T15:07:51+01:00","status":"publish","permalink":"/?p=501","author":"pavel","excerpt":"","type":"post","category":["apex","force.com","salesforce.com"],"tag":[],"post_format":[],"cleanretina_sidebarlayout":["default"],"dsq_thread_id":["5605961530"]}},"__N_SSG":true}