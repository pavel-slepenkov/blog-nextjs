{"pageProps":{"postData":{"id":"p979","contentHtml":"<p><em>Disclaimer :\nNothing unique is described here. Post is made with intent to have a checklist of my setup. It’d be great if it might be interested or helpful to someone else</em></p>\n<p>One of my project requires a daily web scraping and storing data on database. Project includes the following components:</p>\n<ul>\n<li>Python 3.7</li>\n<li>Postgres</li>\n<li>Cron</li>\n</ul>\n<p>Past year this project was running on AWS EC2 t2.micro instance and this was enough. I’m going to switch AWS to GCP in order to test new service</p>\n<figure class=\"wp-block-image\">![](https://www.pavelslepenkov.info/wp-content/uploads/2018/12/image-2-1024x478.png)<figcaption>Max. of CPU utilization on AWS EC2 micro</figcaption></figure>**1. Setup [Google Cloud Platform ](http://cloud.google.com)account**\nIt’s super easy to fill in several forms and get your account.\n<p><strong>2. Setup Debian machine.</strong>\nI choose g1-small machine with 1 vCPU and 1.7 GB memory which should be enough for my experiments. During machine configuration process you can add your ssh key.</p>\n<p><strong>3. Connect via SSH.</strong>\nAfter setup you can login with SSH directly from browser or by your preferable client with ssh key provided in the previous step</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;lt;pre class=&#x26;quot;wp-block-syntaxhighlighter-code brush: bash; notranslate&#x26;quot;&#x26;gt; ssh -i &#x26;quot;~/.ssh/id_rsa&#x26;quot; pavel@32.248.5.168</code></pre></div>\n<p>where pavel is name which I give to my ssh key and 32.248.5.168 is public IP address of my instance.</p>\n<p>After login to the newly created instance I have to setup all required tools</p>\n<p><strong>4. Python installation</strong>\nDebian machine comes with Python 3.5 installed. My projects use python 3.7, so I need to install this Python version.</p>\n<p>Install build-essential</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;lt;pre class=&#x26;quot;wp-block-syntaxhighlighter-code brush: bash; notranslate&#x26;quot;&#x26;gt;sudo apt-get install build-essential</code></pre></div>\n<p>Build Python from sources</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;lt;pre class=&#x26;quot;wp-block-syntaxhighlighter-code brush: bash; notranslate&#x26;quot;&#x26;gt;wget https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tgz\ntar xvf Python-3.7.1.tgz\ncd Python-3.7.1\n./configure --enable-optimizations\nmake -j8\nsudo make altinstall\npython3.7</code></pre></div>\n<p>It took about 40 minutes</p>\n<figure class=\"wp-block-image\">![](https://www.pavelslepenkov.info/wp-content/uploads/2018/12/image.png)<figcaption>CPU utilization during python compilation</figcaption></figure>**5. Postgres installation**\nOfficial postgres site provides [great instruction](https://www.postgresql.org/download/linux/debian/) on how to install postgres version which you need.\ncreate file\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;lt;pre class=&#x26;quot;wp-block-syntaxhighlighter-code brush: plain; notranslate&#x26;quot;&#x26;gt;sudo vi /etc/apt/sources.list.d/pgdg.list</code></pre></div>\n<p>with the following content</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;lt;pre class=&#x26;quot;wp-block-syntaxhighlighter-code brush: plain; notranslate&#x26;quot;&#x26;gt;deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main</code></pre></div>\n<p>Then run</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;lt;pre class=&#x26;quot;wp-block-syntaxhighlighter-code brush: bash; notranslate&#x26;quot;&#x26;gt;wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt-get update\napt-get install postgresql-11</code></pre></div>\n<p>After success Postgres installation we need to perform initial configuration. Setup postgres user password by the following command.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;lt;pre class=&#x26;quot;wp-block-syntaxhighlighter-code brush: bash; notranslate&#x26;quot;&#x26;gt;sudo -u postgres psql -c &#x26;quot;ALTER USER postgres PASSWORD &#x26;#39;your_password&#x26;#39;;&#x26;quot;\nsudo vim /etc/postgresql/11/main/pg_hba.conf</code></pre></div>\n<p>change config file with the following values</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;lt;pre class=&#x26;quot;wp-block-syntaxhighlighter-code brush: plain; notranslate&#x26;quot;&#x26;gt;# Database administrative login by Unix domain socket\nlocal   all             postgres                                md5\n\n# &#x26;quot;local&#x26;quot; is for Unix domain socket connections only\nlocal   all             all                                     md5</code></pre></div>\n<p>Restart Postgres</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;lt;pre class=&#x26;quot;wp-block-syntaxhighlighter-code brush: plain; notranslate&#x26;quot;&#x26;gt;sudo /etc/init.d/postgresql restart</code></pre></div>\n<p>Create new user for using in your development environment</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;lt;pre class=&#x26;quot;wp-block-syntaxhighlighter-code brush: plain; notranslate&#x26;quot;&#x26;gt;createuser -U postgres -d -e -E -l -P -r -s &#x26;lt;my_name&#x26;gt;</code></pre></div>\n<p><strong>6. Configure crontab</strong>\nrun <code>crontab -e</code> and add the following lines to its config</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;lt;pre class=&#x26;quot;wp-block-syntaxhighlighter-code brush: bash; notranslate&#x26;quot;&#x26;gt;SHELL=/bin/bash\nPYTHONIOENCODING=utf8\n0 0 15 * * python /home/pavel/projects/p1/src/scraper1.py all\n0 * * * * python /home/pavel/projects/p1/src/scraper1.py latest\n0 * * * * python /home/pavel/projects/p1/src/s1/scraper2.py</code></pre></div>\n<p><strong>7. Create a swap file</strong>\nGoogle Cloud Compute vm had no swap file. So we need to create one</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;lt;pre class=&#x26;quot;wp-block-syntaxhighlighter-code brush: bash; notranslate&#x26;quot;&#x26;gt;sudo dd if=/dev/zero of=/var/swap bs=2048 count=524288\nsudo chmod 600 /var/swap\nsudo mkswap /var/swap\nsudo swapon /var/swap</code></pre></div>\n<p>And then the following line to /etc/fstab to make it permanent.</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;lt;pre class=&#x26;quot;wp-block-syntaxhighlighter-code brush: plain; notranslate&#x26;quot;&#x26;gt;/var/swap none swap sw 0 0</code></pre></div>\n<p>That’s a complete setup of my web scraping environment. Here’s monitoring of web scraping activity</p>\n<figure class=\"wp-block-image\">![](https://www.pavelslepenkov.info/wp-content/uploads/2018/12/image-1-1024x207.png)</figure>\n","title":"Setting up web scraping python environment on Google Compute Engine","date":"2018-12-10T00:59:58+00:00","status":"publish","permalink":"/?p=979","author":"pavel","excerpt":"","type":"post","category":["Uncategorized"],"tag":["google cloud platform","postgres","python"],"post_format":[],"shareaholic_disable_recommendations":["1"]}},"__N_SSG":true}