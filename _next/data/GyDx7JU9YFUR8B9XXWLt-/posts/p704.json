{"pageProps":{"postData":{"id":"p704","contentHtml":"<p>My new project requires a lot of javascript coding for Lightning component. Many books and guides about programming will teach you jsut a basics but all it seems like this picture</p>\n<p><a href=\"http://www.pavelslepenkov.info/wp-content/uploads/2016/07/754a1def902e9d60cbd631184106d883.jpg\"><img src=\"https://www.pavelslepenkov.info/wp-content/uploads/2016/07/754a1def902e9d60cbd631184106d883.jpg\" alt=\"754a1def902e9d60cbd631184106d883\"></a></p>\n<p>Author will give you a very basic example of use and leaves you alone. Lightning Components developer guide does it. Actually when they teaching about using asynchronous javascript in Lightning they shows how to use <strong>action.setCallback</strong> for just one server action is you callback stack. But what should you do if you need to call server action, then analyse the response and based on this response to make another server callout or few? Probably you can write a some <em>callBack Hell</em> code.</p>\n<p><a href=\"http://www.pavelslepenkov.info/wp-content/uploads/2016/07/promises-and-chaining-in-angularjs-into-callback-hell-and-back-again-17-638.jpg\"><img src=\"https://www.pavelslepenkov.info/wp-content/uploads/2016/07/promises-and-chaining-in-angularjs-into-callback-hell-and-back-again-17-638.jpg\" alt=\"promises-and-chaining-in-angularjs-into-callback-hell-and-back-again-17-638\"></a></p>\n<p>Something like that</p>\n<p>[code lang=”js”]</p>\n<p>var action = cmp.get(\"c.serverAction\");\naction.setCallback(this, function(response){\nvar state = response.getResponse();\nif (state === \"SUCCESS\") {\nif (response.getReturnValue() === someCheckedValue) {\nvar action2 = cmp.get(\"c.serverAction2\");\naction2.setCallback(this, function(response2) {\nvar state2 = response2.getResponse();\nif (state2 === \"SUCCESS\") {\nif (someCondition) {\nvar action3 = cmp.get(\"c.serverAction3\");\naction3.setCallback(this, function(response2) {\n// you can check how deep the rabbit hole goes by adding a few callbacks\n}}}}}}});\n[/code]</p>\n<p>I pretty sure that you found that such code will not be maintainable and flexible as you want. Actually when you add some business logic and error handling within these function you will find that you stack of callbacks takes a 150-200 LoC. Not so good.</p>\n<p>Here’s a option of using <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\">JavaScript promises</a>. (<a href=\"https://davidwalsh.name/promises\">David Walsh’s post</a>)</p>\n<p>[code lang=”javascript”]</p>\n<p>// CONTROLLER ——–\nvar someFunc = function() {\n// runAsync is a function which returns Promise\nrunAsync().then(\nfunction(response) {//onSuccess\nif (response[\"status\"] === 1) {\nhelper.callServerAction2(cmp);\n} else if (response[\"status\"] === 2) {\nhelper.callServerAction3(cmp);\n} else if (response[\"status\"] === 3) {\nhelper.callServerAction4(cmp);\nhelper.callServerAction5(cmp);\n}\n}, function(error) {\n//onError console.error(\"Failed!\", error);\n});\n}</p>\n<p>// HELPER ——–</p>\n<p>var runAsync = function(cmp) {\nvar action = cmp.get(\"c.serverAction\");\n// here’s a first trick – you need to call another helper method through this\n// but in context of Promise ‘this’ will be different\nvar ltg = this;\nreturn new Promise(function(resolve, reject){\n// do some Asynchronous action here\naction.setCallback(ltg, function(response) {\nvar state = response.getState();\nltg.callSomeHelpeMethodFromPromise();\nif (state === \"SUCCESS\") {\nresolve(action.getReturnValue());\n} else {\nreject(state);\n}\n});\n});\n}\n[/code]</p>\n<p>So, as you can see from the code above using of Promises makes your code much modular and flexible to change. This’s a reason why you need to use Promises in your code. If you using jQuery in your project you can see to <a href=\"https://api.jquery.com/category/deferred-object/\">jQuery Deferred Objects</a> which does the same but have a little bit easy API.</p>\n<p>Thanks for reading</p>\n","title":"Using Javascript promises within Lightning Components","date":"2016-07-17T20:37:23+01:00","status":"publish","permalink":"/?p=704","author":"pavel","excerpt":"","type":"post","category":["force.com","javascript","salesforce.com"],"tag":["javascript","lightning","lightning components","promises","salesforce"],"post_format":[],"dsq_thread_id":["5587931328"]}},"__N_SSG":true}