{"pageProps":{"postData":{"id":"p305","contentHtml":"<p>If you greenhorn in area of Force.com development you might fall into the trap. This is very common and often trouble for all developers who start using Force.com platform. This trouble called</p>\n<p>[code gutter=”false”] System.Exception: Too many SOQL queries: 101 [/code]</p>\n<p>The most confused issue with this error is that error might to appear from time to time and you might do not know about an error a pretty much time. So, what is the root of this error? The answer is simple, and this answer is one of most significant rule of Force.com platform – <strong>Do not use SOQL into a loop. Never.</strong></p>\n<p>In the start line when you add a trigger it seems like a very simple solution, you just add something like that:</p>\n<p>[code lang=”java”]\ntrigger AccountTrigger on Account (before update) {\nfor (Account account: Trigger.new) {\nif (Trigger.oldMap.get(account.Id).someField__c != account.someField__c) {\nList&#x3C;Case> relatedCases = [SELECT Id\n,Name\n,Comment\n,Priority\n,Category\nFROM Case\nWHERE Account =: account.Id];\nrecalculateCases(relatedCases);\n}\n}\n}\n[/code]</p>\n<p>From a scratch this code is ok, your users will work fine with just one record which will be edited from UI. But the code will become more difficult, you will start to use Data Loader or any other tools which will be a cause of BULK operation, as soon as you begin work with it you start to get a number of issues regarding a BULK operations. From this moment you should Bulkify you code.</p>\n<p>In many cases the best approach is preparation all needed data outside a loop.</p>\n<p><strong>Utils.cls</strong></p>\n<p>[code lang=”java”]\nclass CommonException extends Exception {}</p>\n<p>public static Map&#x3C;Id, List&#x3C;sObject>> splitListByKey(List&#x3C;sObject> sourceList, String key) {\nif (sourceList == null) {\nthrow new CommonException(‘ERROR: splitListByKey(sourceList, key) got incorrect first parameter.’);\n}\nif (String.isBlank(key)) {\nthrow new CommonException(‘ERROR: splitListByKey(sourceList, key) got incorrect second parameter.’);\n}\nMap&#x3C;Id,List&#x3C;sObject>> result = new Map&#x3C;Id,List&#x3C;sObject>>();\nList&#x3C;sObject> tmpObjs;\nfor (sObject obj: sourceList) {\ntmpObjs = new List&#x3C;sObject>();\nif (obj.get(key) != null &#x26;&#x26; result.containsKey((Id)obj.get(key))) {\ntmpObjs = result.get((Id)obj.get(key));\ntmpObjs.add(obj);\nresult.put((Id)obj.get(key), tmpObjs);\n} else if (obj.get(key) != null) {\ntmpObjs.add(obj);\nresult.put((Id)obj.get(key), tmpObjs);\n}\n}\nreturn result;\n}\n[/code]</p>\n<p><strong>AccountTrigger</strong></p>\n<p>[code lang=”java”]\ntrigger AccountTrigger on Account (before update) {</p>\n<p>Map&#x3C;Id, List&#x3C;Case>> casesByAccountId = Utils.splitListByKey( [SELECT Id\n,Name\n,Comment\n,Priority\n,Category\nFROM Case\nWHERE Account IN : Trigger.newMap.keySet()],\n‘Account’);\nfor (Account account: Trigger.new) {\nif (Trigger.oldMap.get(account.Id).someField__c != account.someField__c) {\nList&#x3C;Case> relatedCases = casesByAccountId.get(account.Id);\nrecalculateCases(relatedCases);\n}\n}\n}\n[/code]</p>\n<p>As you can see in the code above we use query just once. It’s more flexible solution, but you need to remember that this approach should not to be a ‘golden hammer’.</p>\n","title":"Basic method to avoid SOQL in the for loop (Bulkify apex code)","date":"2013-12-04T12:24:52+00:00","status":"publish","permalink":"/?p=305","author":"pavel","excerpt":"","type":"post","category":["apex"],"tag":[],"post_format":[],"cleanretina_sidebarlayout":["no-sidebar-full-width"],"original_post_id":["305"],"dsq_thread_id":["5594842278"]}},"__N_SSG":true}