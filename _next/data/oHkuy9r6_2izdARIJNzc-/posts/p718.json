{"pageProps":{"postData":{"id":"p718","contentHtml":"<p>I found this a few times in a different projects and now I’d share this common mistake with you.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> someVariable <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 50 lines of code between declaration and first use</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> acc<span class=\"token operator\">:</span> accounts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    someVariable <span class=\"token operator\">=</span> acc<span class=\"token punctuation\">.</span><span class=\"token class-name\">Some_Field__c</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// rest of the loop</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Actually I really hate to find something like this in my codebase. What’s wrong with this code? Just one moment – the string variable which is on scope of for loop is declared outside of the for loop. That was an optimisation for some old compilers for C/C++ a many years ago. But modern compilers can optimise your code much better that you. So, just let them do that.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> acc<span class=\"token operator\">:</span> accounts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> someVariable <span class=\"token operator\">=</span> acc<span class=\"token punctuation\">.</span><span class=\"token class-name\">Some_Field__c</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// rest of the loop</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>This code will be much effective that the first one. I did a few tests on Apex.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s1<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Datetime</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    s1 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> – start<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>with results:</p>\n<p>USER_DEBUG [6]|DEBUG|3006\nUSER_DEBUG [6]|DEBUG|3029\nUSER_DEBUG [6]|DEBUG|3189\nUSER_DEBUG [6]|DEBUG|3256\nUSER_DEBUG [7]|DEBUG|3346</p>\n<p>and run</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Datetime</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x26;</span>amp<span class=\"token punctuation\">;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> – start<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>with the following results:</p>\n<p>USER_DEBUG [5]|DEBUG|2954\nUSER_DEBUG [5]|DEBUG|2978\nUSER_DEBUG [5]|DEBUG|3102\nUSER_DEBUG [5]|DEBUG|3176\nUSER_DEBUG [5]|DEBUG|3205</p>\n<p>Runs through 300.000 iterations:</p>\n<p><strong>Variable declared outside the loop</strong>\nUSER_DEBUG [6]|DEBUG|8260\nUSER_DEBUG [6]|DEBUG|8415\nUSER_DEBUG [6]|DEBUG|8606\nUSER_DEBUG [6]|DEBUG|8614\nUSER_DEBUG [6]|DEBUG|8739\nUSER_DEBUG [6]|DEBUG|8852\nUSER_DEBUG [6]|DEBUG|8940\nUSER_DEBUG [6]|DEBUG|9109\nUSER_DEBUG [6]|DEBUG|9184\nUSER_DEBUG [6]|DEBUG|9267\nUSER_DEBUG [6]|DEBUG|9292\nUSER_DEBUG [6]|DEBUG|9461</p>\n<p><strong>Variable declared inside the loop</strong>\nUSER_DEBUG [5]|DEBUG|8093\nUSER_DEBUG [5]|DEBUG|8135\nUSER_DEBUG [5]|DEBUG|8448\nUSER_DEBUG [5]|DEBUG|8598\nUSER_DEBUG [5]|DEBUG|8785\nUSER_DEBUG [5]|DEBUG|8948\nUSER_DEBUG [5]|DEBUG|9032\nUSER_DEBUG [5]|DEBUG|9087\nUSER_DEBUG [5]|DEBUG|9122\nUSER_DEBUG [5]|DEBUG|9260\nUSER_DEBUG [5]|DEBUG|9330\nUSER_DEBUG [5]|DEBUG|9347</p>\n<p><em>*Results was sorted for better readability</em></p>\n<p>As you can see the code which use a declaration of variables inside the loop works faster or with the same time of execution. But such code is much more supportable and readable.</p>\n","title":"Apex variable declaration and for loop performance","date":"2016-08-27T09:15:50+01:00","status":"publish","permalink":"/?p=718","author":"pavel","excerpt":"","type":"post","category":["apex","force.com"],"tag":["apex","best practice","refactoring time","salesforce"],"post_format":[],"dsq_thread_id":["5617202917"]}},"__N_SSG":true}