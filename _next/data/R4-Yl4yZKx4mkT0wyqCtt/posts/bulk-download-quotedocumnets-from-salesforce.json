{"pageProps":{"postData":{"id":"bulk-download-quotedocumnets-from-salesforce","contentHtml":"<p>Sometimes you need to export quote PDFs out of Salesforce. I know a bunch of cases:</p>\n<ul>\n<li>migration to a new salesforce instance</li>\n<li>automated development/test environment data preparation</li>\n<li>finincial audit which requires this kind of documents</li>\n<li>request for all data from a customer</li>\n</ul>\n<p>You can find some discussions of this topic <a href=\"https://salesforce.stackexchange.com/questions/23848/export-all-quote-pdfs-for-migration\">here</a> and even <a href=\"https://trailblazer.salesforce.com/ideaView?id=08730000000l3TqAAI\">idea there</a>.</p>\n<p>It looks here's no simple approach. It requires manual downloading csv, linking these csv, renaming, etc. It seems like space for automation here</p>\n<p><img src=\"/images/p1072/automate-it-1.jpeg\" alt=\"\"></p>\n<p>also I love to solve problems with code and automate all what can be automated. Usually I use python for such kind of tasks.</p>\n<p><img src=\"/images/p1072/automate-it-2.png\" alt=\"\"></p>\n<p><ps1>1. The first approach is fully automated and gives you PDFs downloaded to specified location</ps1></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># First you need to install packages if it was not installed earlier.</span>\npip <span class=\"token function\">install</span> pandas, requests, simple_salesforce\n</code></pre></div>\n<p>Then save the following file somewhere on you computer as <code>main.py</code> and run from command line with <code>python main.py</code> (I did all this stuff on jupyter lab, but if you have no this software installed then you just don't need it)</p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># main.py</span>\n<span class=\"token keyword\">import</span> base64<span class=\"token punctuation\">,</span> os\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> simple_salesforce\n\n<span class=\"token keyword\">from</span> simple_salesforce <span class=\"token keyword\">import</span> Salesforce\n<span class=\"token comment\"># I use envieonment variables to store my SF creds, you just need to replace</span>\n<span class=\"token comment\"># os.environ['KEY'] with string containing your creds</span>\nsalesforce <span class=\"token operator\">=</span> Salesforce<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">'SF_USERNAME'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        password<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">'SF_PASSWORD'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        security_token<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">'SF_SECURITY_TOKEN'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        instance<span class=\"token operator\">=</span><span class=\"token string\">\"https://targetprocess.my.salesforce.com\"</span><span class=\"token punctuation\">,</span>\n                        version<span class=\"token operator\">=</span><span class=\"token string\">\"50.0\"</span><span class=\"token punctuation\">)</span>\nsessionId <span class=\"token operator\">=</span> salesforce<span class=\"token punctuation\">.</span>session_id\ninstance <span class=\"token operator\">=</span> salesforce<span class=\"token punctuation\">.</span>sf_instance\n\n<span class=\"token comment\"># you need to rewrite this query to meet your requirements</span>\nquery <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">'''</span>\n<span class=\"token triple-quoted-string string\">    SELECT Id, Quote.Account.Name, Quote.AccountId, QuoteId</span>\n<span class=\"token triple-quoted-string string\">    FROM QuoteDocument</span>\n<span class=\"token triple-quoted-string string\">    WHERE Quote.IsSyncing = true</span>\n<span class=\"token triple-quoted-string string\">    AND Quote.Opportunity.CloseDate >= 2020-01-01</span>\n<span class=\"token triple-quoted-string string\">    AND Quote.Opportunity.CloseDate &#x3C; 2021-01-01</span>\n<span class=\"token triple-quoted-string string\">    AND (</span>\n<span class=\"token triple-quoted-string string\">        NOT Quote.Opportunity.Type IN (</span>\n<span class=\"token triple-quoted-string string\">            'Existing Business', 'Renewal'</span>\n<span class=\"token triple-quoted-string string\">        )</span>\n<span class=\"token triple-quoted-string string\">    )</span>\n<span class=\"token triple-quoted-string string\">    AND Quote.Opportunity.Stagename = 'Closed Won'</span>\n<span class=\"token triple-quoted-string string\">    ORDER BY Quote.Account.Name, QuoteId, CreatedDate DESC</span>\n<span class=\"token triple-quoted-string string\">'''</span>\n\nrecords <span class=\"token operator\">=</span> salesforce<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\nheaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/text'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Bearer '</span> <span class=\"token operator\">+</span> sessionId\n<span class=\"token punctuation\">}</span>\nquote_ids <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> records<span class=\"token punctuation\">[</span><span class=\"token string\">'records'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Id'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># You might not need the following 3 lines if you will not use it in file name</span>\n    account_name <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Quote'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Account'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span>\n    account_id <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Quote'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'AccountId'</span><span class=\"token punctuation\">)</span>\n    quote_id <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'QuoteId'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># I use additional condition here, as I need only the latest printed pdf</span>\n    <span class=\"token comment\"># instead of all attached to the same quote</span>\n    <span class=\"token keyword\">if</span> quote_id <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> quote_ids<span class=\"token punctuation\">:</span>\n        quote_ids<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>quote_id<span class=\"token punctuation\">)</span>\n        url <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'https://</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>instance<span class=\"token punctuation\">}</span></span><span class=\"token string\">/services/data/v50.0/sobjects/QuoteDocument/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/Document'</span></span>\n        doc <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n        file_name <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"/Users/slepenkov/quotes/quote_</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>account_name<span class=\"token punctuation\">}</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>account_id<span class=\"token punctuation\">}</span></span><span class=\"token string\">__</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>quote_id<span class=\"token punctuation\">}</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.pdf\"</span></span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"skip all quotedocument except the latest\"</span><span class=\"token punctuation\">)</span>\n\n</code></pre></div>\n<p><ps2>Some further technical details</ps2></p>\n<p>When you run query with salesforce.query(query), it brings you python data structure</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\">OrderedDict(<span class=\"token punctuation\">[</span>\n    ('totalSize'<span class=\"token punctuation\">,</span> <span class=\"token number\">156</span>)<span class=\"token punctuation\">,</span>\n    ('done'<span class=\"token punctuation\">,</span> True)<span class=\"token punctuation\">,</span>\n    ('records'<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>list of OrderedDict<span class=\"token punctuation\">]</span>)\n<span class=\"token punctuation\">]</span>)\n</code></pre></div>\n<p>0 element of the records list looks like that and you need to parse it with such chains <code>r.get('Quote').get('Account').get('Name')</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\">OrderedDict(<span class=\"token punctuation\">[</span>('attributes'<span class=\"token punctuation\">,</span>\n              OrderedDict(<span class=\"token punctuation\">[</span>('type'<span class=\"token punctuation\">,</span> 'QuoteDocument')<span class=\"token punctuation\">,</span>\n                           ('url'<span class=\"token punctuation\">,</span>\n                            '/services/data/v50.<span class=\"token number\">0</span>/sobjects/QuoteDocument/0QD0e0000000000001')<span class=\"token punctuation\">]</span>))<span class=\"token punctuation\">,</span>\n             ('Id'<span class=\"token punctuation\">,</span> '0QD0e0000000000001')<span class=\"token punctuation\">,</span>\n             ('Quote'<span class=\"token punctuation\">,</span>\n              OrderedDict(<span class=\"token punctuation\">[</span>('attributes'<span class=\"token punctuation\">,</span>\n                            OrderedDict(<span class=\"token punctuation\">[</span>('type'<span class=\"token punctuation\">,</span> 'Quote')<span class=\"token punctuation\">,</span>\n                                         ('url'<span class=\"token punctuation\">,</span>\n                                          '/services/data/v50.<span class=\"token number\">0</span>/sobjects/Quote/0Q00e0000010000001')<span class=\"token punctuation\">]</span>))<span class=\"token punctuation\">,</span>\n                           ('Account'<span class=\"token punctuation\">,</span>\n                            OrderedDict(<span class=\"token punctuation\">[</span>('attributes'<span class=\"token punctuation\">,</span>\n                                          OrderedDict(<span class=\"token punctuation\">[</span>('type'<span class=\"token punctuation\">,</span> 'Account')<span class=\"token punctuation\">,</span>\n                                                       ('url'<span class=\"token punctuation\">,</span>\n                                                        '/services/data/v50.<span class=\"token number\">0</span>/sobjects/Account/<span class=\"token number\">0010e0000000000001</span>')<span class=\"token punctuation\">]</span>))<span class=\"token punctuation\">,</span>\n                                         ('Name'<span class=\"token punctuation\">,</span> 'Fancy Account Name')<span class=\"token punctuation\">]</span>))<span class=\"token punctuation\">,</span>\n                           ('AccountId'<span class=\"token punctuation\">,</span> '<span class=\"token number\">0010e0000000000001</span>')<span class=\"token punctuation\">]</span>))<span class=\"token punctuation\">,</span>\n             ('QuoteId'<span class=\"token punctuation\">,</span> '0Q00e0000010000001')<span class=\"token punctuation\">]</span>)\n</code></pre></div>\n<p>When you run a request to Salesforce API it will bring you a binary string in the following format</p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># doc.content is a long single string</span>\n<span class=\"token string\">b'%PDF-1.4\\n%\\xe2\\xe3\\xcf\\xd3\\n3 0 obj &#x3C;&#x3C;/ColorSpace/DeviceGray/Subtype...a lot of characters here ~100-300Kb.../Root 14 0 R/Size 16>>\\nstartxref\\n94489\\n%%EOF\\n'</span>\n</code></pre></div>\n<p>this string is text representation of PDF and can be directly save to filesystem.</p>\n<p><ps1>2. The second approach is shorter in part of code implementation</ps1>\nbut requires manual actions</p>\n<p>Run SOQL query with your prefered query tool and save it as csv file</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> Id\n    <span class=\"token punctuation\">,</span> Quote<span class=\"token punctuation\">.</span>Account<span class=\"token punctuation\">.</span>Name\n    <span class=\"token punctuation\">,</span> Quote<span class=\"token punctuation\">.</span>AccountId\n    <span class=\"token punctuation\">,</span> QuoteId\n    <span class=\"token punctuation\">,</span> Quote<span class=\"token punctuation\">.</span>TotalPrice\n    <span class=\"token punctuation\">,</span> GrandTotal\n    <span class=\"token punctuation\">,</span> Document\n<span class=\"token keyword\">FROM</span> QuoteDocument\n<span class=\"token keyword\">WHERE</span> Quote<span class=\"token punctuation\">.</span>IsSyncing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token operator\">AND</span> Quote<span class=\"token punctuation\">.</span>Opportunity<span class=\"token punctuation\">.</span>CloseDate <span class=\"token operator\">>=</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">01</span>\n<span class=\"token operator\">AND</span> Quote<span class=\"token punctuation\">.</span>Opportunity<span class=\"token punctuation\">.</span>CloseDate <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">01</span>\n<span class=\"token operator\">AND</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">NOT</span> Quote<span class=\"token punctuation\">.</span>Opportunity<span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span> <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'Existing Business'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Renewal'</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">AND</span> Quote<span class=\"token punctuation\">.</span>Opportunity<span class=\"token punctuation\">.</span>Stagename <span class=\"token operator\">=</span> <span class=\"token string\">'Closed Won'</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> Quote<span class=\"token punctuation\">.</span>AccountId<span class=\"token punctuation\">,</span> QuoteId<span class=\"token punctuation\">,</span> CreatedDate <span class=\"token keyword\">DESC</span>\n</code></pre></div>\n<p>Query will return PDF content as Base64-encoded string which starts with <code>JVBER</code>. The length of this string is also pretty big, for my case it's around 100-200kB, but if you have some fancy custom pdf it might be even more. Opening a csv with such strings in UI might be painful.</p>\n<p>So you will need to decode it with some script. You definitely can use any programming language here, I'll use python again</p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> base64<span class=\"token punctuation\">,</span> os\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'/Users/slepenkov/quotes/quotes.csv'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> df<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># note that indexes in r[index] expression might be different and need to be validated in csv</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"/Users/slepenkov/quotes/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">_quotedid_</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">_pdfid_</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.pdf\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>The result will be the same - a lot of PDFs which you can load to another Salesforce org or send someone to review.</p>\n","title":"BULK download a QuoteDocument PDFs from Salesforce","date":"2021-03-11T07:45:00+00:00","status":"publish","permalink":"/?p=1072","author":"pavel","excerpt":"","type":"post","tag":["python","salesforce"]}},"__N_SSG":true}