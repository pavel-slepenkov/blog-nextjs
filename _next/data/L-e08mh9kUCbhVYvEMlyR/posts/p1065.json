{"pageProps":{"postData":{"id":"p1065","contentHtml":"<p>This will be some sort of unique use case which most of you will never meet in production but there’s a chance it might be useful for someone as is. Also it might be converted to more useful anonymous webform collecting variant.</p>\n<p>Imagine a case when you have to <strong>give the access to salesforce to someone on the 3rd part without giving actual salesforce credentials</strong>. You can call it anonymous access. My case was a scenario when I developed a sophisticated integration with external system (<a href=\"https://en.wikipedia.org/wiki/1C_Company\">1C:Enterprise platform</a>) which must be run by a scheduler. But for <strong>testing purposes</strong> I had to give the ability to fire callout from Salesforce to 1C for an external developer who made a stuff on 1C part. Usually you perform such testing by yourself as it’s your part of integration. But he need to run this invocation too in order to profile his code. It looks that I can do it for him by request but he need to do that as many times as he want and when he want. Also final testing between all systems should be done on Salesforce production data with UAT 1C environment which will be converted to production version right after successful testing.</p>\n<p>When I was thinking about possible solution I discovered a several ways to do this:</p>\n<ul>\n<li>Create a temporary user in Salesforce for the external developer and allow him to run apex command via developer console</li>\n<li>Expose VF/Lightning page with button to invoke apex code via community/site</li>\n<li>Expose REST service via community/site</li>\n<li>Create a proxy service which can be invoked from external and run inside this service a code with my personal credentials</li>\n</ul>\n<p>Solution with user creation was too bad in security. I prefer to not give credentials to someone external if it’s not required for a business task.</p>\n<p>Dedicated page required controller code, page and community/site + guest user profile configuration to expose it.</p>\n<p>REST service exposed via site/community also requires community/site + guest user profile configuration.</p>\n<p>So the last one seems most simple to me in terms of moving parts which has to be created.</p>\n<p>The final solution looks like that</p>\n<p><img src=\"/images/p1065/p3.png\" alt=\"\"></p>\n<p>Production integration still aimed to be working by scheduler and the testing application requires 2 parts:</p>\n<ul>\n<li>Salesforce REST endpoint</li>\n<li>Google Cloud function</li>\n</ul>\n<p><strong>Apex RESTS endpoint</strong> is very simple</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestResource</span><span class=\"token punctuation\">(</span>urlMapping<span class=\"token operator\">=</span>'<span class=\"token operator\">/</span>testing<span class=\"token operator\">-</span>service'<span class=\"token punctuation\">)</span>\n    global <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test1CIntegration</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// you know what to do with params</span>\n        <span class=\"token comment\">// generate params list, dynamics queries, proxy param</span>\n        <span class=\"token comment\">// to the external system as request header / param / body</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> requestJSON<span class=\"token punctuation\">;</span>\n\n        <span class=\"token annotation punctuation\">@HttpGet</span>\n        global <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getInvoicesInJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">handleRequestParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// do someting with requestJSON</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n                <span class=\"token class-name\">WHERE</span> someField1 <span class=\"token operator\">=</span><span class=\"token operator\">:</span> param1\n                <span class=\"token class-name\">AND</span> someField2 <span class=\"token operator\">=</span><span class=\"token operator\">:</span> param2\n                <span class=\"token constant\">AND</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>etc<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@HttpPost</span>\n        global <span class=\"token keyword\">static</span> <span class=\"token class-name\">SomeCoolWrapperClassObject</span> <span class=\"token function\">sendInvoicesTo1C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">handleRequestParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// do someting with requestJSON</span>\n            <span class=\"token comment\">// actually send data and return 1C response</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">sendInvoicesTo1C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleRequestParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            requestJSON <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">deserializeUntyped</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RestContext</span><span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>requestBody<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> requestJSON<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// generate params as you want</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><strong>The next part is Google Cloud Function</strong>. Instead of it you can use Amazon Lambda or any other similar product. I opted for Google Cloud just in order to practice with it.</p>\n<p>So, let’s do it. First you need a <a href=\"https://cloud.google.com/\">Google Cloud Platform</a> account. You will easily setup it by yourself. After setup just find out <strong>Cloud Functions</strong> in menu and go to it</p>\n<p><img src=\"/images/p1065/i4.png\" alt=\"\"></p>\n<p>Use <strong>HTTP trigger</strong>, it gives you an url which 3rd party person can use to invoke your code with <strong>curl</strong> or <strong>Postman</strong> or any other client tool for making requests (even web browser)</p>\n<p><img src=\"/images/p1065/image-831x1024.png\" alt=\"\"></p>\n<p>Then add required libraries via requirements.txt</p>\n<p><img src=\"/images/p1065/image-1.png\" alt=\"\"></p>\n<p>I use <strong><a href=\"https://github.com/psf/requests\">requests</a></strong> for performing actual requests to Salesforce\nand <code>simple-salesforce</code> in order to login and get session id. Actually you can do all the stuff with <a href=\"https://github.com/simple-salesforce/simple-salesforce\">simple-salesforce </a></p>\n<p>add code to <strong>main.py</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># main.py</span>\n<span class=\"token keyword\">from</span> simple_salesforce <span class=\"token keyword\">import</span> Salesforce\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">import</span> json\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>initial_request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sf_url <span class=\"token operator\">=</span> <span class=\"token string\">'https://myorg.my.salesforce.com/services/apexrest/testing-service'</span>\n    <span class=\"token comment\"># request made by 3rd party user</span>\n    <span class=\"token comment\"># you can put configuration parameters in here</span>\n    <span class=\"token comment\"># and pass the to Salesforce</span>\n    request_json <span class=\"token operator\">=</span> initial_request<span class=\"token punctuation\">.</span>get_json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    headers <span class=\"token operator\">=</span> sf_login<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    http_method <span class=\"token operator\">=</span> <span class=\"token string\">'GET'</span>\n    <span class=\"token keyword\">if</span> request_json <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        http_method <span class=\"token operator\">=</span> <span class=\"token string\">'POST'</span>\n    sf_response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">(</span>\n        http_method<span class=\"token punctuation\">,</span> url<span class=\"token operator\">=</span>sf_url<span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span>request_json<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># return SF response to a client</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Test sync run at \"</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>utcnow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" (UTC)\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n Salesforce Response: \"</span> <span class=\"token operator\">+</span> sf_response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">sf_login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># login to Salesforce</span>\n    salesforce <span class=\"token operator\">=</span> Salesforce<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span>\n                            password<span class=\"token operator\">=</span><span class=\"token string\">'pass'</span><span class=\"token punctuation\">,</span>\n                            security_token<span class=\"token operator\">=</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span>\n                            instance<span class=\"token operator\">=</span><span class=\"token string\">'https://myorg.my.salesforce.com'</span><span class=\"token punctuation\">,</span>\n                            sandbox<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n                            version<span class=\"token operator\">=</span><span class=\"token string\">'47.0'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># get session id and return it as auth header</span>\n    session_id <span class=\"token operator\">=</span> salesforce<span class=\"token punctuation\">.</span>session_id<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bearer \"</span> <span class=\"token operator\">+</span> session_id<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<p>click create and that’s it. You cloud function ready to run. You’re so serverless!</p>\n<p>Now external developer can use terminal with curl or Postman to perform request to your cloud function which fire SF integration</p>\n<p><code>curl -X POST \"https://us-central1-sftest-999.cloudfunctions.net/integration-1C-test\"     -H \"Content-Type:application/json\"     --data '{\"docType\":\"Invoice\", \"invoiceNumber\": \"i-9999\"}'</code></p>\n<p>You can also easily modify this code in order to run some anonymous form collection. You just need a form which will be hosted somewhere and use this proxy to post data to Salesforce.</p>\n","title":"Google Cloud Functions for external testing of salesforce API endpoints","date":"2019-12-27T11:30:35+00:00","status":"publish","permalink":"/?p=1065","author":"pavel","excerpt":"","type":"post","category":["integration","web-services"],"tag":["apex","google cloud functions","google cloud platform","integration","serverless"],"post_format":[]}},"__N_SSG":true}