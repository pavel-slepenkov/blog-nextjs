{"pageProps":{"postData":{"id":"p110","contentHtml":"<ps2>\n    Declaimer: please be aware that all things into this article are ‚Äúbad practice‚Äù and should not be used constantly, it might be used for a really urgent production deployment when you have faced with a broken tests and as a result a code coverage has dropped down than 75% and you has been blocked.\n</ps2>\n<p>As you know salesforce requires at least 75% test coverage for production deployment. You can find the following statement in documentation:</p>\n<blockquote>\n<p>The code coverage percentage for a class or trigger displayed on the Apex Classes or the Apex Triggers page includes a fraction between parentheses with the numbers used to compute this percentage, for example, 90% (72/80). <strong>The code coverage percentage is calculated by dividing the number of lines covered by tests by the total number of lines that are part of the coverage calculation</strong>. Some lines of code are excluded from code coverage calculation, such as:</p>\n<ul>\n<li>Comments</li>\n<li>System.debug statements</li>\n<li>Test methods</li>\n<li>A code statement that is broken up into multiple lines‚Äîonly the first line is counted</li>\n</ul>\n<p>To generate code coverage results, you must run your Apex tests first. If no tests have been run, no code coverage data will exist and 0% (No coverage data) displays for classes (except for test classes) and triggers on the Apex Classes and Apex Triggers pages.</p>\n</blockquote>\n<p>Cool! The code coverage calculation is pretty simple and we can cheat the system. Just use the following code</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/*</span>\n<span class=\"token comment\">Please improve your tests and remove this class as soon as possible</span>\n<span class=\"token comment\">*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CodeCoverageHack</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// you can continue this method with i++; up to 3000 lines</span>\n        <span class=\"token comment\">// after that you will be stoped by limit of size</span>\n        <span class=\"token comment\">// but you can create a few such methods</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hack1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// do the same thing ‚Ä¶</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@IsTest</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">CodeCoverageHack</span><span class=\"token punctuation\">.</span><span class=\"token function\">hack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CodeCoverageHack</span><span class=\"token punctuation\">.</span><span class=\"token function\">hack1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//‚Ä¶</span>\n        <span class=\"token class-name\">CodeCoverageHack</span><span class=\"token punctuation\">.</span><span class=\"token function\">hackN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<p>That‚Äôs all. Now you can increase you code coverage up to 99% and go home after production deployment for thinking about your broken tests and fix it up tomorrow üòà</p>\n","title":"apex code coverage hack","date":"2013-07-27T18:15:59+01:00","status":"publish","permalink":"/?p=110","author":"pavel","excerpt":"","type":"post","category":["force.com"],"tag":["apex","bad things","hack"],"post_format":[],"fplayout":["default"],"original_post_id":["110"],"dsq_thread_id":["5589149833"]}},"__N_SSG":true}