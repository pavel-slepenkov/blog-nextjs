{"pageProps":{"postData":{"id":"redshift-duplicates","contentHtml":"<p>Sometimes you got duplicates in database and have to deal with it. There's 2 possibilities - you have an auto-generated unique id on the table or not. The first case is very easy</p>\n<p>Let say we have table feedback where we collect all the feedbacks given by our users. This table has field <code>feedback_id</code> which represents unique id of external system from which data was posted.</p>\n<table>\n    <thead>\n        <tr>\n            <th>id</th>\n            <th>feedback_id</th>\n            <th>type</th>\n            <th>date</th>\n        </tr>\n    </thead>\n    <tbody >\n        <tr>\n            <td>0001</td>\n            <td>MX-001</td>\n            <td>livechat</td>\n            <td>2020-01-01</td>\n        </tr>\n        <tr>\n            <td>0002</td>\n            <td>MX-001</td>\n            <td>livechat</td>\n            <td>2020-01-01</td>\n        </tr>\n        <tr>\n            <td>0003</td>\n            <td>MX-001</td>\n            <td>livechat</td>\n            <td>2020-01-01</td>\n        </tr>\n        <tr>\n            <td>0004</td>\n            <td>MX-002</td>\n            <td>pendo</td>\n            <td>2020-01-03</td>\n        </tr>\n        <tr>\n            <td>0005</td>\n            <td>MX-002</td>\n            <td>pendo</td>\n            <td>2020-01-03</td>\n        </tr>\n    </tbody>\n</table>\n<p>If we created an auto-generated Id on it then we safe</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> feedback\n<span class=\"token keyword\">where</span> id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">with</span> dups <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>\n            row_number<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> feedback_id <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token keyword\">date</span> <span class=\"token keyword\">desc</span><span class=\"token punctuation\">)</span> rn\n        <span class=\"token keyword\">from</span> feedback\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">select</span> id <span class=\"token keyword\">from</span> dups <span class=\"token keyword\">where</span> rn <span class=\"token operator\">></span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>But what to do if there's no unique Id? Temporary table is an approach - first we create <code>feedback_temp</code> where only unique records from all set of duplicates will be stored.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> feedback_temp <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">with</span> dups <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">select</span> feedback_id\n        <span class=\"token keyword\">from</span> feedback\n        <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">having</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">,</span> sorted <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">select</span> row_number<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">over</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">partition</span> <span class=\"token keyword\">by</span> ff<span class=\"token punctuation\">.</span>feedback_id <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token keyword\">date</span> <span class=\"token keyword\">desc</span><span class=\"token punctuation\">)</span> rn<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n        <span class=\"token keyword\">from</span> feedback f\n            <span class=\"token keyword\">right</span> <span class=\"token keyword\">join</span> dups d <span class=\"token keyword\">on</span> d<span class=\"token punctuation\">.</span>feedback_id <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>feedback_id\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> sorted <span class=\"token keyword\">where</span> rn <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Next step is to remove the duplicates from initial table</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> feedback\n<span class=\"token keyword\">where</span> feedback_id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">select</span> feedback_id\n    <span class=\"token keyword\">from</span> feedback\n    <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">having</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Then we just need to insert data back and remove temp table</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">BEGIN</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> feedback\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> feedback_temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> feedback_temp<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">END</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n","title":"Remove Postgres / Redshift duplicates without unique key","date":"2021-03-03T07:37:23+01:00","status":"publish","permalink":"/?p=1069","author":"pavel","excerpt":"","type":"post","tag":["aws","redshift","sql","postgres","duplicates"]}},"__N_SSG":true}