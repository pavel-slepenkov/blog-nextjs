{"pageProps":{"postData":{"id":"manage-aws-security-groups-from-cli","contentHtml":"<p>Securing your account is one of the first actions you need to take on any IT environment you manage.\nWhen it comes to a remote work you might often need to switch places from where you're working, or your home network can be using a dynamic IP address.</p>\n<p><ps1>VPN</ps1> is preferable solution to access a work network first and then connect to any resources you need in AWS. But sometime it's just convinient to whitelist your current IP address directly in AWS. Unstable VPN connection might be the example of such circumstances.</p>\n<p>One way to do so is to edit inbound rules via AWS management console. It works if you need to modify just one security group with a few ports. But when you need to add a several ports into several groups there're too many clicks.  So, let's automate it.</p>\n<p>If you're working with AWS you'd probably have <strong>aws cli</strong> installed on your machine. If not, you have to install it. It's increadibly useful tool for AWS management. For our task we need just 2 commands</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">aws ec2 authorize-security-group-ingress\naws ec2 revoke-security-group-ingress\n</code></pre></div>\n<p>Its names are self-descriptive so a problem might appear only with dynamic content. First we need our IP address which we would like to add to a security group. Another thing which we'd like to have is dynamic group description which allows to distinguish security rules in AWS console.\nI have an alias for obtaining my current IP address in my <strong>.bashrc</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">ip</span><span class=\"token operator\">=</span><span class=\"token string\">'dig +short myip.opendns.com @resolver1.opendns.com'</span>\n</code></pre></div>\n<p>I will generate description with just adding a date, so adding my current IP address to the security group with access on 22 port looks like this</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">aws ec2 authorize-security-group-ingress <span class=\"token punctuation\">\\</span>\n    --group-name <span class=\"token string\">\"securityGroupName\"</span> <span class=\"token punctuation\">\\</span>\n    --ip-permissions <span class=\"token assign-left variable\">IpProtocol</span><span class=\"token operator\">=</span>tcp,FromPort<span class=\"token operator\">=</span><span class=\"token number\">22</span>,ToPort<span class=\"token operator\">=</span><span class=\"token number\">22</span>,IpRanges<span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$eval</span> [{CidrIp=\"</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ip</span><span class=\"token variable\">)</span></span>/32<span class=\"token string\">\", Description=\"</span>Pavel__<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%F<span class=\"token variable\">)</span></span>__tmp<span class=\"token string\">\"}]\"</span> <span class=\"token punctuation\">\\</span>\n    --output text\n</code></pre></div>\n<p>Removing address from a security group requires a name of security group, port and IP address which we're removing</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">aws ec2 revoke-security-group-ingress --group-name <span class=\"token string\">\"securityGroupName\"</span> --protocol tcp --port <span class=\"token number\">22</span> --cidr <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ip</span><span class=\"token variable\">)</span></span>/32\"</span>\n</code></pre></div>\n<p>With this knowledge we can develop a short bash script which will do all the work for us.\nBasically we just need to add current address to a security groups we want and remove old ones. In order to know the old IP we need to store it somewhere. File in the same directory looks good.</p>\n<p><strong>Final script looks like that</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#! /bin/bash</span>\n<span class=\"token comment\"># create empty file if the file doesn't exist</span>\n<span class=\"token assign-left variable\">filename</span><span class=\"token operator\">=</span><span class=\"token string\">'ips_in_aws.txt'</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -e <span class=\"token string\">\"<span class=\"token variable\">$filename</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token function\">touch</span> <span class=\"token string\">\"<span class=\"token variable\">$filename</span>\"</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token comment\"># get previous run IP from a file</span>\n<span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">read</span> p<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token assign-left variable\">old_ip</span><span class=\"token operator\">=</span><span class=\"token variable\">$p</span>\n<span class=\"token keyword\">done</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token variable\">$filename</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"old ip     = <span class=\"token variable\">$old_ip</span>\"</span>\n<span class=\"token assign-left variable\">current_ip</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ip</span><span class=\"token variable\">)</span></span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"current ip = <span class=\"token variable\">$current_ip</span>\"</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$old_ip</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">||</span> <span class=\"token variable\">$old_ip</span> <span class=\"token operator\">!=</span> <span class=\"token variable\">$current_ip</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"save new IP to the file\"</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$current_ip</span> <span class=\"token operator\">>></span> ips_in_aws.txt\n    <span class=\"token comment\"># ssh access</span>\n    <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">groupName</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"sec_group1_name\"</span> <span class=\"token string\">\"sec_group2_name\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$old_ip</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n            <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"remove old IP from <span class=\"token variable\">$groupName</span>\"</span>\n            aws ec2 revoke-security-group-ingress --group-name <span class=\"token string\">\"<span class=\"token variable\">$groupName</span>\"</span> --protocol tcp --port <span class=\"token number\">22</span> --cidr <span class=\"token string\">\"<span class=\"token variable\">$old_ip</span>/32\"</span>\n        <span class=\"token keyword\">fi</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"add rule for <span class=\"token variable\">$current_ip</span> to <span class=\"token variable\">$groupName</span>\"</span>\n        aws ec2 authorize-security-group-ingress --group-name <span class=\"token string\">\"<span class=\"token variable\">$groupName</span>\"</span> --ip-permissions <span class=\"token assign-left variable\">IpProtocol</span><span class=\"token operator\">=</span>tcp,FromPort<span class=\"token operator\">=</span><span class=\"token number\">22</span>,ToPort<span class=\"token operator\">=</span><span class=\"token number\">22</span>,IpRanges<span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$eval</span> [{CidrIp=\"</span><span class=\"token variable\">$current_ip</span>/32<span class=\"token string\">\", Description=\"</span>Pavel__<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%F<span class=\"token variable\">)</span></span>__tmp<span class=\"token string\">\"}]\"</span> --output text\n    <span class=\"token keyword\">done</span>\n    <span class=\"token comment\"># remove old IP from security groups</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$old_ip</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n        aws ec2 revoke-security-group-ingress --group-name <span class=\"token string\">\"sec_group1_name\"</span> --protocol tcp --port <span class=\"token number\">5432</span> --cidr <span class=\"token string\">\"<span class=\"token variable\">$old_ip</span>/32\"</span>\n        aws ec2 revoke-security-group-ingress --group-name <span class=\"token string\">\"sec_group2_name\"</span> --protocol tcp --port <span class=\"token number\">443</span> --cidr <span class=\"token string\">\"<span class=\"token variable\">$old_ip</span>/32\"</span>\n        aws ec2 revoke-security-group-ingress --group-name <span class=\"token string\">\"sec_group3_name\"</span> --protocol tcp --port <span class=\"token number\">5439</span> --cidr <span class=\"token string\">\"<span class=\"token variable\">$old_ip</span>/32\"</span>\n    <span class=\"token keyword\">fi</span>\n    <span class=\"token comment\"># Postgres, Redshift and web access</span>\n    aws ec2 authorize-security-group-ingress --group-name <span class=\"token string\">\"sec_group3_name\"</span> --ip-permissions <span class=\"token assign-left variable\">IpProtocol</span><span class=\"token operator\">=</span>tcp,FromPort<span class=\"token operator\">=</span><span class=\"token number\">5439</span>,ToPort<span class=\"token operator\">=</span><span class=\"token number\">5439</span>,IpRanges<span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$eval</span> [{CidrIp=\"</span><span class=\"token variable\">$current_ip</span>/32<span class=\"token string\">\", Description=\"</span>Pavel__<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%F<span class=\"token variable\">)</span></span>__tmp<span class=\"token string\">\"}]\"</span> --output text\n    aws ec2 authorize-security-group-ingress --group-name <span class=\"token string\">\"sec_group1_name\"</span> --ip-permissions <span class=\"token assign-left variable\">IpProtocol</span><span class=\"token operator\">=</span>tcp,FromPort<span class=\"token operator\">=</span><span class=\"token number\">5432</span>,ToPort<span class=\"token operator\">=</span><span class=\"token number\">5432</span>,IpRanges<span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$eval</span> [{CidrIp=\"</span><span class=\"token variable\">$current_ip</span>/32<span class=\"token string\">\", Description=\"</span>Pavel__<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%F<span class=\"token variable\">)</span></span>__tmp<span class=\"token string\">\"}]\"</span> --output text\n    aws ec2 authorize-security-group-ingress --group-name <span class=\"token string\">\"sec_group2_name\"</span> --ip-permissions <span class=\"token assign-left variable\">IpProtocol</span><span class=\"token operator\">=</span>tcp,FromPort<span class=\"token operator\">=</span><span class=\"token number\">443</span>,ToPort<span class=\"token operator\">=</span><span class=\"token number\">443</span>,IpRanges<span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$eval</span> [{CidrIp=\"</span><span class=\"token variable\">$current_ip</span>/32<span class=\"token string\">\", Description=\"</span>Pavel__<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +%F<span class=\"token variable\">)</span></span>__tmp<span class=\"token string\">\"}]\"</span> --output text\n<span class=\"token keyword\">else</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"IPs are the same, exit\"</span>\n<span class=\"token keyword\">fi</span>\n</code></pre></div>\n<p>After running the script you get IP added to specified security groups</p>\n","title":"Manage AWS security groups with AWS CLI and bash","date":"2021-05-31T12:45:00+00:00","status":"publish","permalink":"/?p=1074","author":"pavel","excerpt":"","type":"post","tag":["aws","bash","security"]}},"__N_SSG":true}