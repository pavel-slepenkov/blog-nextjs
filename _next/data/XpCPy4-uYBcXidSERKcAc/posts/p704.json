{"pageProps":{"postData":{"id":"p704","contentHtml":"<p>My new project requires a lot of javascript coding for Lightning component. Many books and guides about programming will teach you a basics but finally many of them just like that</p>\n<p><img src=\"/images/p704/754a1def902e9d60cbd631184106d883.jpg\" alt=\"ho to draw an owl\"></p>\n<p>Author will give you a very basic example of use and leaves you alone. Lightning Components developer guide does it. Actually when they teaching about using asynchronous javascript in Lightning they shows how to use <strong>action.setCallback</strong> for just one server action in callback stack. But what should you do if you need to call server action, then analyse the response and based on this response to make another server callout or few? Probably you can write some <em>callBack Hell</em> code</p>\n<p><img src=\"/images/p704/promises-and-chaining-in-angularjs-into-callback-hell-and-back-again-17-638.jpg\" alt=\"promises-and-chaining-in-angularjs-into-callback-hell-and-back-again\"></p>\n<p>Let consider for our test case the following requirements:</p>\n<ul>\n<li>run server function 1 and wait for response</li>\n<li>if server returned 1 then call server function 2</li>\n<li>do some stuff based on server function 2 response</li>\n</ul>\n<p>Something like that</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> action <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c.serverAction\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\naction<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> state <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">===</span> <span class=\"token string\">\"SUCCESS\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> someCheckedValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> action2 <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c.serverAction2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            action2<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">var</span> state2 <span class=\"token operator\">=</span> response2<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>state2 <span class=\"token operator\">===</span> <span class=\"token string\">\"SUCCESS\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>someCondition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">var</span> action3 <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c.serverAction3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        action3<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\">// you can check how deep the rabbit hole goes by adding a few callbacks</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>I pretty sure that you can't name this code maintainable and flexible. Actually when you add some business logic and error handling within these function you will find that you stack of callbacks takes a 150-200 LoC. Not so good.</p>\n<p>Here’s an option to use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\">JavaScript promises</a> (<a href=\"https://davidwalsh.name/promises\">David Walsh’s post</a>)</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// CONTROLLER ——–</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">someFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// runAsync is a function which returns Promise</span>\n    <span class=\"token function\">runAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">//onSuccess</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">[</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                helper<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">callServerAction2</span><span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">[</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                helper<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">callServerAction3</span><span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">[</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                helper<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">callServerAction4</span><span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                helper<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">callServerAction5</span><span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//onError</span>\n            <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed!\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// HELPER ——–</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">runAsync</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cmp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> action <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c.serverAction\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// here’s a first trick – you need to call another helper method through this</span>\n        <span class=\"token comment\">// but in context of Promise ‘this’ will be different</span>\n        <span class=\"token keyword\">var</span> ltg <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// do some Asynchronous action here</span>\n            action<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setCallback</span><span class=\"token punctuation\">(</span>ltg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> state <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ltg<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">callSomeHelpeMethodFromPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">===</span> <span class=\"token string\">\"SUCCESS\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>So, as you can see from the code above using of Promises makes your code much modular and flexible to change. This’s a reason why you need to use Promises in your code. If you using jQuery in your project you can see to <a href=\"https://api.jquery.com/category/deferred-object/\">jQuery Deferred Objects</a> which does the same but have a little bit easy API.</p>\n<p>Thanks for reading</p>\n","title":"Using Javascript promises within Lightning Components","date":"2016-07-17T20:37:23+01:00","status":"publish","permalink":"/?p=704","author":"pavel","excerpt":"","type":"post","category":["force.com","javascript","salesforce.com"],"tag":["javascript","lightning","lightning components","promises","salesforce"]}},"__N_SSG":true}